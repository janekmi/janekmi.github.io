<!-- Creator     : groff version 1.18.1.4 -->
<!-- CreationDate: Thu Apr  7 16:24:49 2016 -->
<html>
<head>
<meta name="generator" content="groff -Thtml, see www.gnu.org">
<meta name="Content-Style" content="text/css">
<title>libpmemblk</title>
</head>
<body>

<h1 align=center>libpmemblk</h1>
<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#MOST COMMONLY USED FUNCTIONS">MOST COMMONLY USED FUNCTIONS</a><br>
<a href="#LIBRARY API VERSIONING">LIBRARY API VERSIONING</a><br>
<a href="#MANAGING LIBRARY BEHAVIOR">MANAGING LIBRARY BEHAVIOR</a><br>
<a href="#DEBUGGING AND ERROR HANDLING">DEBUGGING AND ERROR HANDLING</a><br>
<a href="#EXAMPLES">EXAMPLES</a><br>
<a href="#BUGS">BUGS</a><br>
<a href="#ACKNOWLEDGEMENTS">ACKNOWLEDGEMENTS</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>

<hr>
<a name="NAME"></a>
<h2>NAME</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>libpmemblk &minus; persistent memory resident array of
blocks</p>
</td>
</table>
<a name="SYNOPSIS"></a>
<h2>SYNOPSIS</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<pre><b>#include &lt;libpmemblk.h&gt;

cc ... -lpmemblk -lpmem

Most commonly used functions:

PMEMblkpool *pmemblk_open(const char *</b><i>path</i><b>, size_t</b> <i>bsize</i><b>);
PMEMblkpool *pmemblk_create(const char *</b><i>path</i><b>, size_t</b> <i>bsize</i><b>,
    size_t</b> <i>poolsize</i><b>, mode_t</b> <i>mode</i><b>);
void pmemblk_close(PMEMblkpool *</b><i>pbp</i><b>);
size_t pmemblk_bsize(PMEMblkpool *</b><i>pbp</i><b>);
size_t pmemblk_nblock(PMEMblkpool *</b><i>pbp</i><b>);
int pmemblk_read(PMEMblkpool *</b><i>pbp</i><b>, void *</b><i>buf</i><b>, long long</b> <i>blockno</i><b>);
int pmemblk_write(PMEMblkpool *</b><i>pbp</i><b>, const void *</b><i>buf</i><b>,
    long long</b> <i>blockno</i><b>);
int pmemblk_set_zero(PMEMblkpool *</b><i>pbp</i><b>, long long</b> <i>blockno</i><b>);
int pmemblk_set_error(PMEMblkpool *</b><i>pbp</i><b>, long long</b> <i>blockno</i><b>);

Library API versioning:

const char *pmemblk_check_version(
    unsigned</b> <i>major_required</i><b>,
    unsigned</b> <i>minor_required</i><b>);

Managing library behavior:

void pmemblk_set_funcs(
    void *(*</b><i>malloc_func</i><b>)(size_t</b> <i>size</i><b>),
    void (*</b><i>free_func</i><b>)(void *</b><i>ptr</i><b>),
    void *(*</b><i>realloc_func</i><b>)(void *</b><i>ptr</i><b>, size_t</b> <i>size</i><b>),
    char *(*</b><i>strdup_func</i><b>)(const char *</b><i>s</i><b>));
int pmemblk_check(const char *</b><i>path</i><b>, size_t</b> <i>bsize</i><b>);

Error handling:

const char *pmemblk_errormsg(void);
</b></pre>
</td>
</table>
<a name="DESCRIPTION"></a>
<h2>DESCRIPTION</h2>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>libpmemblk</b> provides an array of blocks in
<i>persistent memory</i> (pmem) such that updates to a
single block are atomic. This library is intended for
applications using direct access storage (DAX), which is
storage that supports load/store access without paging
blocks from a block storage device. Some types of
<i>non-volatile memory DIMMs</i> (NVDIMMs) provide this type
of byte addressable access to storage. A <i>persistent
memory aware file system</i> is typically used to expose the
direct access to applications. Memory mapping a file from
this type of file system results in the load/store,
non-paged access to pmem. <b>libpmemblk</b> builds on this
type of memory mapped file.</p>
<!-- INDENTATION -->
<p>This library is for applications that need a potentially
large array of blocks, all the same size, where any given
block is updated atomically (the update cannot be
<i>torn</i> by program interruption such as power failures).
This library builds on the low-level pmem support provided
by <b>libpmem</b>(3), handling the transactional update of
the blocks, flushing to persistence, and recovery for the
application.</p>
<!-- INDENTATION -->
<p><b>libpmemblk</b> is one of a collection of persistent
memory libraries available, the others are:</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p><b>libpmemobj</b>(3), a general use persistent memory
API, providing memory allocation and transactional
operations on variable-sized objects.</p>
<!-- INDENTATION -->
<p><b>libpmemlog</b>(3), providing a pmem-resident log
file.</p>
<!-- INDENTATION -->
<p><b>libpmem</b>(3), low-level persistent memory
support.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>Under normal usage, <b>libpmemblk</b> will never print
messages or intentionally cause the process to exit. The
only exception to this is the debugging information, when
enabled, as described under <b>DEBUGGING AND ERROR
HANDLING</b> below.</p>
</td>
</table>
<a name="MOST COMMONLY USED FUNCTIONS"></a>
<h2>MOST COMMONLY USED FUNCTIONS</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>To use the atomic block arrays supplied by
<b>libpmemblk</b>, a <i>memory pool</i> is first created.
This is done with the <b>pmemblk_create</b>() function
described in this section. The other functions described in
this section then operate on the resulting block memory
pool.</p>
<!-- INDENTATION -->
<p>Once created, the memory pool is represented by an opaque
handle, of type <i>PMEMblkpool *</i>, which is passed to
most of the other functions in this section. Internally,
<b>libpmemblk</b> will use either <b>pmem_persist</b>() or
<b>msync</b>(2) when it needs to flush changes, depending on
whether the memory pool appears to be persistent memory or a
regular file (see the <b>pmem_is_pmem</b>() function in
<b>libpmem</b>(3) for more information). There is no need
for applications to flush changes directly when using the
block memory API provided by <b>libpmemblk</b>.</p>
<!-- INDENTATION -->
<p><b>PMEMblkpool *pmemblk_open(const char
*</b><i>path</i><b>, size_t</b> <i>bsize</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_open</b>() function opens an existing
block memory pool, returning a memory pool handle used with
most of the functions in this section. <i>path</i> must be
an existing file containing a block memory pool as created
by <b>pmemblk_create</b>(). The application must have
permission to open the file and memory map it with
read/write permissions. If the <i>bsize</i> provided is
non-zero, <b>pmemblk_open</b>() will verify the given block
size matches the block size used when the pool was created.
Otherwise, <b>pmemblk_open</b>() will open the pool without
verification of the block size. The <i>bsize</i> can be
determined using the <b>pmemblk_bsize</b>() function. If an
error prevents the pool from being opened,
<b>pmemblk_open</b>() returns NULL and sets errno
appropriately. A block size mismatch with the <i>bsize</i>
argument passed in results in errno being set to EINVAL.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>PMEMblkpool *pmemblk_create(const char
*</b><i>path</i><b>, size_t</b> <i>bsize</i><b>,<br>
size_t</b> <i>poolsize</i><b>, mode_t</b>
<i>mode</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_create</b>() function creates a block
memory pool with the given total <i>poolsize</i> divided up
into as many elements of size <i>bsize</i> as will fit in
the pool. Since the transactional nature of a block memory
pool requires some space overhead in the memory pool, the
resulting number of available blocks is less than
<i>poolsize / bsize</i>, and is made available to the caller
via the <b>pmemblk_nblock</b>() function described below.
Given the specifics of the implementation, the number of
available blocks for the user cannot be less than 256. This
translates to at least 512 internal blocks. <i>path</i>
specifies the name of the memory pool file to be created.
<i>mode</i> specifies the permissions to use when creating
the file as described by <b>creat</b>(2). The memory pool
file is fully allocated to the size <i>poolsize</i> using
<b>posix_fallocate</b>(3). The caller may choose to take
responsibility for creating the memory pool file by creating
it before calling <b>pmemblk_create</b>() and then
specifying <i>poolsize</i> as zero. In this case
<b>pmemblk_create</b>() will take the pool size from the
size of the existing file and will verify that the file
appears to be empty by searching for any non-zero data in
the pool header at the beginning of the file. The minimum
file size allowed by the library for a block pool is defined
in <b>&lt;libpmemblk.h&gt;</b> as <b>PMEMBLK_MIN_POOL</b>.
<i>bsize</i> can be any non-zero value, however
<b>libpmemblk</b> will silently round up the given size to
<b>PMEMBLK_MIN_BLK</b>, as defined in
<b>&lt;libpmemblk.h&gt;</b>.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>Depending on the configuration of the system, the
available space of non-volatile memory space may be divided
into multiple memory devices. In such case, the maximum size
of the pmemblk memory pool could be limited by the capacity
of a single memory device. The <b>libpmemblk</b> allows
building persistent memory resident array spanning multiple
memory devices by creation of persistent memory pools
consisting of multiple files, where each part of such a
<i>pool set</i> may be stored on different pmem-aware
filesystem.</p>
<!-- INDENTATION -->
<p>Creation of all the parts of the pool set can be done
with the <b>pmemblk_create</b>() function. However, the
recommended method for creating pool sets is to do it by
using the <b>pmempool</b>(1) utility.</p>
<!-- INDENTATION -->
<p>When creating the pool set consisting of multiple files,
the <i>path</i> argument passed to <b>pmemblk_create</b>()
must point to the special <i>set</i> file that defines the
pool layout and the location of all the parts of the pool
set. The <i>poolsize</i> argument must be 0. The meaning of
<i>layout</i> and <i>mode</i> arguments doesn&rsquo;t
change, except that the same <i>mode</i> is used for
creation of all the parts of the pool set. If the error
prevents any of the pool set files from being created,
<b>pmemblk_create</b>() returns NULL and sets errno
appropriately.</p>
<!-- INDENTATION -->
<p>When opening the pool set consisting of multiple files,
the <i>path</i> argument passed to <b>pmemblk_open</b>()
must not point to the pmemblk memory pool file, but to the
same <i>set</i> file that was used for the pool set
creation. If an error prevents any of the pool set files
from being opened, or if the actual size of any file does
not match the corresponding part size defined in <i>set</i>
file <b>pmemblk_open</b>() returns NULL and sets errno
appropriately.</p>
<!-- INDENTATION -->
<p>The set file is a plain text file, which must start with
the line containing a <i>PMEMPOOLSET</i> string, followed by
the specification of all the pool parts in the next lines.
For each part, the file size and the absolute path must be
provided. The minimum file size of each part of the pool set
is the same as the minimum size allowed for a block pool
consisting of one file. It is defined in
<b>&lt;libpmemblk.h&gt;</b> as <b>PMEMBLK_MIN_POOL</b>.
Lines starting with &quot;#&quot; character are ignored.</p>
<!-- INDENTATION -->
<p>Here is the example &quot;myblkpool.set&quot; file:</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<pre>PMEMPOOLSET
100G /mountpoint0/myfile.part0
200G /mountpoint1/myfile.part1
400G /mountpoint2/myfile.part2
</pre>
</td>
</table>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>The files in the set may be created by running the
following command:</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<pre>pmempool create blk &lt;bsize&gt; --from-set=myblkpool.set
</pre>
</td>
</table>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>void pmemblk_close(PMEMblkpool
*</b><i>pbp</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_close</b>() function closes the memory
pool indicated by <i>pbp</i> and deletes the memory pool
handle. The block memory pool itself lives on in the file
that contains it and may be re-opened at a later time using
<b>pmemblk_open</b>() as described above.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>size_t pmemblk_bsize(PMEMblkpool
*</b><i>pbp</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_bsize</b>() function returns the block
size of the specified block memory pool. It&rsquo;s the
value which was passed as <i>bsize</i> to
<b>pmemblk_create</b>(). <i>pbp</i> must be a block memory
pool handle as returned by <b>pmemblk_open</b>() or
<b>pmemblk_create</b>().</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>size_t pmemblk_nblock(PMEMblkpool
*</b><i>pbp</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_nblock</b>() function returns the usable
space in the block memory pool, expressed as the number of
blocks available. <i>pbp</i> must be a block memory pool
handle as returned by <b>pmemblk_open</b>() or
<b>pmemblk_create</b>().</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>int pmemblk_read(PMEMblkpool *</b><i>pbp</i><b>, void
*</b><i>buf</i><b>, long long</b>
<i>blockno</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_read</b>() function reads a block from
memory pool <i>pbp</i>, block number <i>blockno</i>, into
the buffer <i>buf</i>. On success, zero is returned. On
error, -1 is returned and errno is set. Reading a block that
has never been written by <b>pmemblk_write</b>() will return
a block of zeroes.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>int pmemblk_write(PMEMblkpool *</b><i>pbp</i><b>,
const void *</b><i>buf</i><b>,<br>
long long</b> <i>blockno</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_write</b>() function writes a block from
<i>buf</i> to block number <i>blockno</i> in the memory pool
<i>pbp</i>. The write is atomic with respect to other reads
and writes. In addition, the write cannot be torn by program
failure or system crash; on recovery the block is guaranteed
to contain either the old data or the new data, never a
mixture of both. On success, zero is returned. On error, -1
is returned and errno is set.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>int pmemblk_set_zero(PMEMblkpool *</b><i>pbp</i><b>,
long long</b> <i>blockno</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_set_zero</b>() function writes zeros to
block number <i>blockno</i> in memory pool <i>pbp</i>. Using
this function is faster than actually writing a block of
zeros since <b>libpmemblk</b> uses metadata to indicate the
block should read back as zero. On success, zero is
returned. On error, -1 is returned and errno is set.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>int pmemblk_set_error(PMEMblkpool *</b><i>pbp</i><b>,
long long</b> <i>blockno</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_set_error</b>() function sets the error
state for block number <i>blockno</i> in memory pool
<i>pbp</i>. A block in the error state returns errno EIO
when read. Writing the block clears the error state and
returns the block to normal use. On success, zero is
returned. On error, -1 is returned and errno is set.</p>
</td>
</table>
<a name="LIBRARY API VERSIONING"></a>
<h2>LIBRARY API VERSIONING</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>This section describes how the library API is versioned,
allowing applications to work with an evolving API.</p>
<!-- INDENTATION -->
<p><b>const char *pmemblk_check_version(<br>
unsigned</b> <i>major_required</i><b>,<br>
unsigned</b> <i>minor_required</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_check_version</b>() function is used to
see if the installed <b>libpmemblk</b> supports the version
of the library API required by an application. The easiest
way to do this is for the application to supply the
compile-time version information, supplied by defines in
<b>&lt;libpmemblk.h&gt;</b>, like this:</p>
<!-- INDENTATION -->
<pre>reason = pmemblk_check_version(PMEMBLK_MAJOR_VERSION,
                            PMEMBLK_MINOR_VERSION);
if (reason != NULL) {
    /*  version check failed, reason string tells you why */
}
</pre>
<!-- INDENTATION -->
<p>Any mismatch in the major version number is considered a
failure, but a library with a newer minor version number
will pass this check since increasing minor versions imply
backwards compatibility.</p>
<!-- INDENTATION -->
<p>An application can also check specifically for the
existence of an interface by checking for the version where
that interface was introduced. These versions are documented
in this man page as follows: unless otherwise specified, all
interfaces described here are available in version 1.0 of
the library. Interfaces added after version 1.0 will contain
the text <i>introduced in version x.y</i> in the section of
this manual describing the feature.</p>
<!-- INDENTATION -->
<p>When the version check performed by
<b>pmemblk_check_version</b>() is successful, the return
value is NULL. Otherwise the return value is a static string
describing the reason for failing the version check. The
string returned by <b>pmemblk_check_version</b>() must not
be modified or freed.</p>
</td>
</table>
<a name="MANAGING LIBRARY BEHAVIOR"></a>
<h2>MANAGING LIBRARY BEHAVIOR</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>The library entry points described in this section are
less commonly used than the previous sections.</p>
<!-- INDENTATION -->
<p><b>void pmemblk_set_funcs(<br>
void *(*</b><i>malloc_func</i><b>)(size_t</b>
<i>size</i><b>),<br>
void (*</b><i>free_func</i><b>)(void
*</b><i>ptr</i><b>),<br>
void *(*</b><i>realloc_func</i><b>)(void *</b><i>ptr</i><b>,
size_t</b> <i>size</i><b>),<br>
char *(*</b><i>strdup_func</i><b>)(const char
*</b><i>s</i><b>));</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_set_funcs</b>() function allows an
application to override memory allocation calls used
internally by <b>libpmemblk</b>. Passing in NULL for any of
the handlers will cause the <b>libpmemblk</b> default
function to be used. The library does not make heavy use of
the system malloc functions, but it does allocate
approximately 4-8 kilobytes for each memory pool in use.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>int pmemblk_check(const char *</b><i>path</i><b>,
size_t</b> <i>bsize</i><b>);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_check</b>() function performs a
consistency check of the file indicated by <i>path</i> and
returns 1 if the memory pool is found to be consistent. Any
inconsistencies found will cause <b>pmemblk_check</b>() to
return 0, in which case the use of the file with
<b>libpmemblk</b> will result in undefined behavior. The
debug version of <b>libpmemblk</b> will provide additional
details on inconsistencies when <b>PMEMBLK_LOG_LEVEL</b> is
at least 1, as described in the <b>DEBUGGING AND ERROR
HANDLING</b> section below. When <i>bsize</i> is non-zero
<b>pmemblk_check</b>() will compare it to the block size of
the pool and return 0 when they don&rsquo;t match.
<b>pmemblk_check</b>() will return -1 and set errno if it
cannot perform the consistency check due to other errors.
<b>pmemblk_check</b>() opens the given <i>path</i> read-only
so it never makes any changes to the file.</p>
</td>
</table>
<a name="DEBUGGING AND ERROR HANDLING"></a>
<h2>DEBUGGING AND ERROR HANDLING</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>Two versions of <b>libpmemblk</b> are typically available
on a development system. The normal version, accessed when a
program is linked using the <b>-lpmemblk</b> option, is
optimized for performance. That version skips checks that
impact performance and never logs any trace information or
performs any run-time assertions. If an error is detected
during the call to <b>libpmemblk</b> function, an
application may retrieve an error message describing the
reason of failure using the following function:</p>
<!-- INDENTATION -->
<p><b>const char *pmemblk_errormsg(void);</b></p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>The <b>pmemblk_errormsg</b>() function returns a pointer
to a static buffer containing the last error message logged
for current thread. The error message may include
description of the corresponding error code (if errno was
set), as returned by <b>strerror</b>(3). The error message
buffer is thread-local; errors encountered in one thread do
not affect its value in other threads. The buffer is never
cleared by any library function; its content is significant
only when the return value of the immediately preceding call
to <b>libpmemblk</b> function indicated an error, or if
errno was set. The application must not modify or free the
error message string, but it may be modified by subsequent
calls to other library functions.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>A second version of <b>libpmemblk</b>, accessed when a
program uses the libraries under <b>/usr/lib/nvml_debug</b>,
contains run-time assertions and trace points. The typical
way to access the debug version is to set the environment
variable <b>LD_LIBRARY_PATH</b> to
<b>/usr/lib/nvml_debug</b> or <b>/usr/lib64/nvml_debug</b>
depending on where the debug libraries are installed on the
system. The trace points in the debug version of the library
are enabled using the environment variable
<b>PMEMBLK_LOG_LEVEL</b>, which can be set to the following
values:</p>
</td>
</table>
<!-- TABS -->
<table width="100%" border=0 rules="none" frame="void"
       cols="4" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="2%">

<p>0</p>
</td>
<td width="7%"></td>
<td width="77%">

<p>This is the default level when <b>PMEMBLK_LOG_LEVEL</b>
is not set. No log messages are emitted at this level.</p>
</td>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="2%">

<p>1</p>
</td>
<td width="7%"></td>
<td width="77%">

<p>Additional details on any errors detected are logged (in
addition to returning the errno-based errors as usual). The
same information may be retrieved using
<b>pmemblk_errormsg</b>().</p>
</td>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="2%">

<p>2</p>
</td>
<td width="7%"></td>
<td width="77%">

<p>A trace of basic operations is logged.</p>
</td>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="2%">

<p>3</p>
</td>
<td width="7%"></td>
<td width="77%">

<p>This level enables a very verbose amount of function
call tracing in the library.</p>
</td>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="2%">

<p>4</p>
</td>
<td width="7%"></td>
<td width="77%">

<p>This level enables voluminous and fairly obscure tracing
information that is likely only useful to the
<b>libpmemblk</b> developers.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>The environment variable <b>PMEMBLK_LOG_FILE</b>
specifies a file name where all logging information should
be written. If the last character in the name is
&quot;-&quot;, the PID of the current process will be
appended to the file name when the log file is created. If
<b>PMEMBLK_LOG_FILE</b> is not set, the logging output goes
to stderr.</p>
<!-- INDENTATION -->
<p>Setting the environment variable <b>PMEMBLK_LOG_LEVEL</b>
has no effect on the non-debug version of
<b>libpmemblk</b>.</p>
</td>
</table>
<a name="EXAMPLES"></a>
<h2>EXAMPLES</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>The following example illustrates how the
<b>libpmemblk</b> API is used.</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<pre>#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;errno.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;string.h&gt;
#include &lt;libpmemblk.h&gt;

/* size of the pmemblk pool -- 1 GB */
#define POOL_SIZE ((size_t)(1 &lt;&lt; 30))

/* size of each element in the pmem pool */
#define ELEMENT_SIZE 1024

int
main(int argc, char *argv[])
{
    const char path[] = &quot;/pmem-fs/myfile&quot;;
    PMEMblkpool *pbp;
    size_t nelements;
    char buf[ELEMENT_SIZE];

   /* create the pmemblk pool or open it if it already exists */
    pbp = pmemblk_create(path, ELEMENT_SIZE, POOL_SIZE, 0666);

   if (pbp == NULL)
        pbp = pmemblk_open(path, ELEMENT_SIZE);

   if (pbp == NULL) {
        perror(path);
        exit(1);
    }

   /* how many elements fit into the file? */
    nelements = pmemblk_nblock(pbp);
    printf(&quot;file holds %zu elements0, nelements);

   /* store a block at index 5 */
    strcpy(buf, &quot;hello, world&quot;);
    if (pmemblk_write(pbp, buf, 5) &lt; 0) {
        perror(&quot;pmemblk_write&quot;);
        exit(1);
    }

   /* read the block at index 10 (reads as zeros initially) */
    if (pmemblk_read(pbp, buf, 10) &lt; 0) {
        perror(&quot;pmemblk_read&quot;);
        exit(1);
    }

   /* zero out the block at index 5 */
    if (pmemblk_set_zero(pbp, 5) &lt; 0) {
        perror(&quot;pmemblk_set_zero&quot;);
        exit(1);
    }

   /* ... */

   pmemblk_close(pbp);
}
</pre>
</td>
</table>
<!-- INDENTATION -->

<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>See http://pmem.io/nvml/libpmemblk for more examples
using the <b>libpmemblk</b> API.</p>
</td>
</table>
<a name="BUGS"></a>
<h2>BUGS</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p>Unlike <b>libpmemobj</b>, data replication is not
supported in <b>libpmemblk</b>. Thus, it is not allowed to
specify replica sections in pool set files.</p>
</td>
</table>
<a name="ACKNOWLEDGEMENTS"></a>
<h2>ACKNOWLEDGEMENTS</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>libpmemblk</b> builds on the persistent memory
programming model recommended by the SNIA NVM Programming
Technical Work Group:</p>
</td>
</table>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="20%"></td>
<td width="79%">
<p>http://snia.org/nvmp</p>
</td>
</table>
<a name="SEE ALSO"></a>
<h2>SEE ALSO</h2>
<!-- INDENTATION -->
<table width="100%" border=0 rules="none" frame="void"
       cols="2" cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="10%"></td>
<td width="89%">
<p><b>mmap</b>(2), <b>munmap</b>(2), <b>msync</b>(2),
<b>strerror</b>(3), <b>libpmemobj</b>(3),
<b>libpmemlog</b>(3), <b>libpmem</b>(3), <b>libvmem</b>(3)
and <b>http://pmem.io</b>.</p>
</td>
</table>
<hr>
</body>
</html>
